#!/usr/bin/env escript

%% Copyright
-author("Nikolay Mavrenkov (koluch@koluch.ru)").

-include_lib("kernel/include/file.hrl").
%% API
-export([]).
-define(APP_ROOT, ".").
-define(TOOL_ROOT, "./_app-build").

main(Args) ->
    case lists:nth(1,Args) of
        "upgrade" ->
            {ok, [Settings]} = file:consult(?APP_ROOT ++ "/build.config"),
            copy_fixed(Settings);
        Unknown -> e("Unknown command - " ++ Unknown)
    end.


copy_fixed(Settings) ->
    io:format("Settigns: ~p~n", [Settings]),
    {ok, AllFiles} = get_all_files(?TOOL_ROOT ++ "/templates",""),
    lists:map(fun(File) ->
        case File of
            {FileName, regular} ->
                FullResultFileName = ?APP_ROOT ++ "/" ++ FileName,
                io:format(">>> Upgrade: copy file ~p~n", [FullResultFileName]),
                {ok, FileContent} = file:read_file(?TOOL_ROOT ++ "/templates/" ++ FileName),
                NewContent = replace_all(FileContent, Settings),
                file:write_file(FullResultFileName, NewContent);
            {FileName, directory} ->
                FullResultFileName = ?APP_ROOT ++ "/" ++ FileName,
                io:format(">>> Upgrade: make dir ~p~n", [FullResultFileName]),
                file:make_dir(FullResultFileName)
        end
    end,AllFiles).

replace_all(FileBody, []) -> FileBody;
replace_all(FileBody, [{Name,Value}|Rest]) ->
    {ok, Regexp} = re:compile("##\\["++atom_to_list(Name)++"\\]##"),
    NewBody = re:replace(FileBody, Regexp, Value),
    replace_all(NewBody, Rest).



get_all_files(Folder,Prefix) ->
    case file:list_dir(Folder ++ "/" ++ Prefix) of
        {ok, AllFiles} ->
            ClearedList = lists:map(fun(NextFileName) ->
                RelativeFileName = Prefix ++ NextFileName,
                {ok, FileInfo} = file:read_file_info(Folder ++ "/" ++ RelativeFileName),
                {RelativeFileName, FileInfo#file_info.type}
            end,AllFiles),
            Result = lists:flatmap(fun(File) ->
                case File of
                    {Name, directory} -> {ok, SubFiles} = get_all_files(Folder,Name ++ "/"),[File | SubFiles];
                    {_, _} -> [File]
                end
            end, ClearedList),
            {ok, Result};
        {error, Why} -> {error, Why}
    end.



e(Msg) -> error("ERROR: " ++ Msg).
