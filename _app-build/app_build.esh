#!/usr/bin/env escript

%% Copyright
-author("Nikolay Mavrenkov (koluch@koluch.ru)").

-include_lib("kernel/include/file.hrl").
%% API
-export([]).

main(Args) ->
    case lists:nth(1,Args) of
        "upgrade" ->
            {ok, [Settings]} = file:consult("build.config"),
            copy_fixed(Settings);
        Unknown -> e("Unknown command - " ++ Unknown)
    end.


copy_fixed(Settings) ->
    io:format("Settigns: ~p~n", [Settings]),
    {ok, AllFiles} = get_all_files("fixed",""),
    lists:map(fun(File) ->
        case File of
            {FileName, regular} ->
                io:format(">>> Upgrade: copy file ~p~n", [FileName]),
                {ok, FileContent} = file:read_file("templates/" ++ FileName),
                NewContent = replace_all(FileContent, Settings),
                file:write_file("/home/koluch/dev/erlang/id3erl/" ++ FileName, NewContent);
            {FileName, directory} ->
                io:format(">>> Upgrade: make dir ~p~n", [FileName]),
                file:make_dir("/home/koluch/dev/erlang/id3erl/" ++ FileName)
        end
    end,AllFiles),
    io:format("AllFiles: ~p~n", [AllFiles]).

replace_all(FileBody, []) -> FileBody;
replace_all(FileBody, [{Name,Value}|Rest]) ->
    {ok, Regexp} = re:compile("{\\{"++atom_to_list(Name)++"}\\}"),
    NewBody = re:replace(FileBody, Regexp, Value),
    replace_all(NewBody, Rest).



get_all_files(Folder,Prefix) ->
    io:format("~n~nFolder: ~p, Prefix: ~p~n", [Folder,Prefix]),
    case file:list_dir(Folder ++ "/" ++ Prefix) of
        {ok, AllFiles} ->
            io:format("AllFiles: ~p~n", [AllFiles]),
            ClearedList = lists:map(fun(NextFileName) ->
                RelativeFileName = Prefix ++ NextFileName,
                {ok, FileInfo} = file:read_file_info(Folder ++ "/" ++ RelativeFileName),
                {RelativeFileName, FileInfo#file_info.type}
            end,AllFiles),
            io:format("Cleared list: ~p~n", [ClearedList]),
            Result = lists:flatmap(fun(File) ->
                case File of
                    {Name, directory} -> {ok, SubFiles} = get_all_files(Folder,Name ++ "/"),[File | SubFiles];
                    {_, _} -> [File]
                end
            end, ClearedList),
            {ok, Result};
        {error, Why} -> {error, Why}
    end.



e(Msg) -> error("ERROR: " ++ Msg).
