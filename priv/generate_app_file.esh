#!/usr/bin/env escript

%% Copyright
-author("Nikolay Mavrenkov (koluch@koluch.ru)").

%% API
-export([main/1]).

main(Args) ->
    SourceFileName = lists:nth(1, Args),
    ResultFileName = lists:nth(2, Args),
    io:format("Generate .app file '~p' from template '~p'...~n", [ResultFileName, SourceFileName]),
    io:format("    Read source file...~n"),
    case file:consult(SourceFileName) of
        {ok, [FileContent]} ->
            io:format("    Fetch app id and already defined parameters...~n"),
            {application, Id, Params} = FileContent,
            io:format("    Generate rest of parameters...~n"),
            FullParams = lists:reverse(full_values(lists:reverse(Params))),
            io:format("    Write result file...~n"),
            case unconsult(ResultFileName, [{application, Id, FullParams}]) of
                ok -> io:format("    Done!~n");
                {error, _Why} -> error("Cannot write the file:" ++ ResultFileName )
            end;
        {error, _Why} ->
            error("Cannot read file: " ++ SourceFileName )
    end.

full_values(ReadParams) ->
    Values1 = add_modules(ReadParams),
    Values2 = add_registered(Values1),
    Values3 = add_applications(Values2),
    Values4 = add_env(Values3),
    Values4.

add_modules(ReadParams) ->
    case find_param("modules", ReadParams) of
        not_found ->
            {ok, ModuleFiles} = file:list_dir("src"),
            ModuleNames = lists:map(fun(Name) ->
                list_to_atom(string:left(Name, string:len(Name) - 4))
            end, ModuleFiles),
            [{modules,ModuleNames}|ReadParams];
        _Found -> ReadParams
    end.

add_registered(ReadParams) ->
    case find_param("registered", ReadParams) of
        not_found -> [{registered,[]}|ReadParams];
        _Found -> ReadParams
    end.

add_applications(ReadParams) ->
    case find_param("applications", ReadParams) of
        not_found -> [{applications,[kernel,stdlib]}|ReadParams];
        _Found -> ReadParams
    end.

add_env(ReadParams) ->
    case find_param("env", ReadParams) of
        not_found -> [{env,[]}|ReadParams];
        _Found -> ReadParams
    end.



%% Routine functions
find_param(_Name,[]) -> not_found;
find_param(Name,[{Name, _} = Param|_]) -> Param;
find_param(Name,[_|Rest]) -> find_param(Name, Rest).

unconsult(File, L) ->
    case file:open(File, write) of
        {ok, S} ->
            lists:foreach(fun(X) -> io:format(S, "~p.~n" ,[X]) end, L),
            file:close(S),
            ok;
        Error -> Error
    end.